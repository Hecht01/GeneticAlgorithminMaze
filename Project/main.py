##Finished Code here

# letzte Ã„nderung 18.06.2023 16:58


import mesa
import random
from copy import deepcopy as dc
import math

fitness_quotient = 100
length_dividend = 2
mutate_min = 2
mutate_max = 10
agent_number = 50

# 10x10 maze with no solution
maze1_dict = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (7, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (9, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (1, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (9, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (4, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (5, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (6, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (7, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (9, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (10, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (5, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (6, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (1, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 5): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (4, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (6, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (7, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (9, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (3, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (5, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 6): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (7, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (1, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (3, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (1, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (5, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (5, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 0}}

# 10x10 maze with solution
maze2_dict = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (5, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (6, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (3, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (4, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (7, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (9, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (1, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 4): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (5, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (9, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (5, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 5): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (8, 5): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (9, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 5): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (1, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (5, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (7, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 6): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (9, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (9, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (9, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (5, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (1, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}

# 20x20 maze
maze3_dict = {(1, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (2, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (4, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (5, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (9, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (11, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (13, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (14, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (15, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (17, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (19, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (5, 2): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (6, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (7, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 2): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (10, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (15, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (17, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (19, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (11, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (14, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (15, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (17, 3): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (18, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (19, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (3, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (7, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (10, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (11, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (12, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (13, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (15, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (16, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (17, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (18, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (19, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (7, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (9, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (10, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (12, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (15, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (17, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (19, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (4, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (5, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (6, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (7, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (11, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (12, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (13, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (15, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (17, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (18, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (19, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (20, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (1, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (5, 7): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (6, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (9, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (11, 7): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (12, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (15, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (16, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (17, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (19, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (20, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (5, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (6, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (7, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (11, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (13, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (15, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (17, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (19, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (20, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (4, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (5, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (9, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (10, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (15, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (17, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (19, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (20, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (1, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 10): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (4, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (5, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (6, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 10): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (9, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (10, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (11, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (13, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (15, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (17, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (18, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (19, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 11): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (6, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (7, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (9, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 11): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (12, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (13, 11): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (14, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (15, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (16, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (17, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (19, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 12): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (4, 12): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (5, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (6, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (7, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (11, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 12): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (14, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (15, 12): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (16, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (17, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (19, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (20, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (5, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (8, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 13): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (11, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (13, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (15, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (17, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (18, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (19, 13): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (20, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (5, 14): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (6, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (11, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 14): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (15, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (16, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (17, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (19, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (4, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (11, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (13, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (15, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 15): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (17, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (19, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (3, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (4, 16): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (5, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (7, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (8, 16): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (11, 16): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (12, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (14, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (15, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (17, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (19, 16): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (20, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 17): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (3, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (5, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (6, 17): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 17): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (10, 17): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (11, 17): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 17): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (15, 17): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (16, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (17, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (18, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (19, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (1, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (3, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (5, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 18): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (11, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (14, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (15, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (17, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (19, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 19): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (3, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 19): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (5, 19): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (6, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (8, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 19): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (11, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (12, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (13, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (15, 19): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 19): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (17, 19): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 19): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (19, 19): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (20, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (3, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (7, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (9, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (11, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (12, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (13, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (15, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (16, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (17, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (19, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (20, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}

# 15x15 maze
maze4_dict = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (7, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (11, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (13, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (15, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (2, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (4, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (6, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (8, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (9, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (10, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (11, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (12, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (14, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 2): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (1, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (7, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (9, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (11, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (13, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (14, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (15, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (1, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (2, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (3, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (4, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (5, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (6, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (8, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (10, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (11, 4): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (12, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (13, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (14, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (1, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (3, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (9, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (10, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (11, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (13, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (14, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (15, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (2, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (4, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (6, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (7, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (8, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (10, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (11, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (12, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (13, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (14, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (3, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (5, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (7, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (9, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (11, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (13, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (14, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (15, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (2, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (4, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (6, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (8, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (9, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (10, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (12, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (14, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (15, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
              (3, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (5, 9): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (6, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (7, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (8, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
              (9, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (11, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (12, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (13, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
              (15, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (2, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (3, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (4, 10): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (5, 10): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (6, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (7, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (8, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (10, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (11, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (12, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (13, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (14, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (15, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (1, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (3, 11): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (4, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (5, 11): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (6, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (7, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (9, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (13, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
              (15, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (2, 12): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (4, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (6, 12): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (7, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (8, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (10, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (12, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (13, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 1},
              (14, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (15, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (3, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (5, 13): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
              (7, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (9, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 13): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (11, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (13, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 13): {'E': 0, 'W': 1, 'N': 0, 'S': 0},
              (15, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (2, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (3, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (4, 14): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (5, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (6, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (7, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
              (8, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
              (10, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (11, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (12, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (14, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (15, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
              (1, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (3, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (5, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (7, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 15): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
              (9, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
              (11, 15): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (12, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
              (13, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
              (15, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}

maze_choice = maze1_dict

class Agent(mesa.Agent):
    def __init__(self, gen_length, unique_id, model):
        super().__init__(unique_id, model)
        self.Gen_Length = gen_length
        self.id = unique_id
        self.fitness_quotient = self.model.fitness_quotient
        self.length_dividend = self.model.length_dividend
        self.mutate_min = self.model.mutate_min
        self.mutate_max = self.model.mutate_max
        self.Gen = self.generate_gen(gen_length)
        self.fitness = 0
        self.x2 = 0
        self.y2 = 0
        self.type = 1
        self.step_Counter = 0

    def step(self):
        self.agent_function()

    def fitness_function(self):
        self.fitness = self.fitness_quotient / (self.a_star_distance() + 1)

    def generate_gen(self, length):
        gen = []
        options = ["E", "W", "S", "N"]
        length = length / self.length_dividend
        length = math.floor(length)
        for i in range(length):
            gen.append(random.choice(options))
        return gen

    def cross_over(self, Gen):
        upper_bound = random.randrange(1, len(Gen))
        lower_bound = random.randrange(0, upper_bound)
        temp_Gen = self.Gen
        for i in range(lower_bound, upper_bound):
            temp_Gen[i] = Gen[i]
        self.Gen = temp_Gen

    def mutate(self):
        Gen_Copy = dc(self.Gen)
        num_mutate = random.randrange(self.mutate_min, self.mutate_max)
        options = ["E", "W", "S", "N"]
        for i in range(num_mutate):
            temp = random.choice(options)
            Gen_Copy[random.randrange(0, len(self.Gen))] = temp
        self.set_gen(Gen_Copy)

    # returns node on current agent position
    def get_current_node(self):
        return self.model.nodes[self.pos]

    # uses A* to find the distance to goal (used for fitness funktion)
    def a_star_distance(self):
        current_position = self.get_current_node()
        goal_position = self.model.goal_node
        open_list = []
        closed_list = []
        open_list.append(current_position)
        cost_so_far = {current_position: 0}

        while len(open_list) != 0:
            # set temp to avoid comparing with null
            temp = open_list[0]

            # find smallest f value
            if len(open_list) > 1:
                for node in open_list:
                    if node.get_f() > temp.get_f():
                        temp = node
                n = temp
            else:
                n = temp

            # close current node
            open_list.remove(n)
            closed_list.append(n)

            # break condition to avoid infinite loop
            if n.is_goal:
                break

            # calc costs until at goal
            for neighbour in n.neighbours:
                new_cost = cost_so_far[n] + 10
                # check if neighbour has been looked in
                # (no need for checking if a shorter Path
                # exists as every path has the same cost)
                if neighbour not in closed_list and neighbour not in open_list:
                    cost_so_far[neighbour] = new_cost
                    x = goal_position.x
                    y = goal_position.y
                    neighbour.set_h((x, y))
                    neighbour.set_g(new_cost)
                    n = neighbour

                    if neighbour not in open_list:
                        open_list.append(neighbour)
        return cost_so_far[goal_position]

    def move(self, direction):
        # first checks in which direction it should move and generates new position
        if direction == "E":
            new_pos = (self.pos[0] + 1, self.pos[1])
        elif direction == "W":
            new_pos = (self.pos[0] - 1, self.pos[1])
        elif direction == "S":
            new_pos = (self.pos[0], self.pos[1] - 1)
        elif direction == "N":
            new_pos = (self.pos[0], self.pos[1] + 1)
        # check if node in new position is a parent of current node(and not out of bounds)
        if not self.model.grid.out_of_bounds(new_pos):
            new_pos_inhabitant = self.model.grid.get_cell_list_contents(new_pos)[0]
            current_node = self.model.grid.get_cell_list_contents(self.pos)[0]
            # move agent to new position and update x2 and y2
            if new_pos_inhabitant in current_node.parents:
                self.model.grid.move_agent(self, new_pos)
                self.x2 = self.pos[0]
                self.y2 = self.pos[1]
                return True
            else:
                return False
        else:
            return False

    # rather simple Agent function, uses the Gens to move
    def agent_function(self):
        gen = self.Gen
        current_Node = self.get_current_node()
        if len(gen) > self.step_Counter:
            if current_Node.is_goal:
                pass
            else:
                if gen[self.step_Counter] == "E":
                    self.move("E")

                elif gen[self.step_Counter] == "W":
                    self.move("W")

                elif gen[self.step_Counter] == "S":
                    self.move("S")

                elif gen[self.step_Counter] == "N":
                    self.move("N")

    def __str__(self):
        gen_Str = ""
        for i in range(len(self.Gen)):
            gen_Str = gen_Str + self.Gen[i]
        return str(self.id) + ": " + gen_Str + "  Fitness: " + str(self.fitness)

    # Gen not short for Generation => Genetics
    def get_gen(self):
        return self.Gen

    def set_gen(self, n_Gen):
        self.Gen = dc(n_Gen)


# Wall class, used for Visualisation
class Wall(mesa.Agent):
    def __init__(self, unique_id, model, direction):
        super().__init__(unique_id, model)
        self.direction = direction
        self.type = 2


class Node(mesa.Agent):
    def __init__(self, x, y, parent_list, unique_id, model):
        super().__init__(unique_id, model)
        # x and y represent the original coordinates in the pyamaze maze
        self.x = x
        self.y = y
        # actual_x, actual_y represent the coordinates on the mesa grid, initialized in model
        self.actual_x = -1
        self.actual_y = -1
        # stores directions from maze dictionary
        self.parent_directions = parent_list
        self.parents = []
        self.h_value = 0
        self.g_value = 0
        self.f_value = 0
        self.neighbours = []
        self.is_goal = False
        self.type = 0
        self.walls = []
        self.agent_count = 0

    def add_neighbour(self, node_to_add):
        self.neighbours.append(node_to_add)

    def set_h(self, goal_pos):
        goal_x, goal_y = goal_pos
        self.h_value = abs(self.actual_x - goal_x) + abs(self.actual_y - goal_y)
        self.f_value = self.h_value + self.g_value

    def set_g(self, new_g):
        self.g_value = new_g
        self.f_value = self.h_value + self.g_value

    def get_g(self):
        return self.g_value

    def get_h(self):
        return self.h_value

    def get_f(self):
        return self.f_value

    def get_neighbour(self):
        return self.neighbours


class MazeModel(mesa.Model):

    def calc_avg_fit(self, agents):
        if agents[0].step_Counter >= len(agents[0].Gen) - 2:
            value = 0
            for a in agents:
                value = value + a.fitness
            value = value / len(agents)
            return value * 100

    def calc_max_fit(self, agents):
        if agents[0].step_Counter >= len(agents[0].Gen) - 2:
            for a in agents:
                a.fitness_function()
            return max([agent.fitness for agent in agents])

    def __init__(self, fitness_quotient=100, length_dividend=2, mutate_min=2, mutate_max=10, agent_number=50):
        # set width and height depending on chosen maze
        self.maze = maze_choice
        if self.maze == maze3_dict:
            self.width = 20
            self.height = 20
        elif self.maze == maze4_dict:
            self.width = 15
            self.height = 15
        else:
            self.width = 10
            self.height = 10
        self.grid = mesa.space.MultiGrid(self.width, self.height, False)
        self.schedule = mesa.time.RandomActivation(self)
        self.agents = []
        self.nodes = {}
        self.goal_pos = (self.width - 1, self.height - 1)
        self.goal_node: Node
        self.start_pos = (0, 0)
        self.start_node: Node
        # parameters for sliders
        self.num_agents = agent_number
        self.fitness_quotient = fitness_quotient
        self.length_dividend = length_dividend
        self.mutate_min = mutate_min
        self.mutate_max = mutate_max
        # initialize maze on grid
        self.maze_to_grid()
        self.average_fitness = 0
        self.max_fitness = 0
        self.datacollector = mesa.datacollection.DataCollector(
            {"Average fitness": "average_fitness", "Max fitness": "max_fitness"})
        self.datacollector.collect(self)
        self.gen_count = 0
        self.is_running = True

    # initializes nodes on grid
    def initialize_nodes(self):
        # id_counter so all agents have different IDs
        id_counter = 0
        # initialize all nodes in maze
        for i in range(self.height):
            for j in range(self.width):
                # x and y represent the coordinates in the pyamaze maze
                x = int(self.height - i)
                y = int(j + 1)
                # create node and add it to grid
                a = Node(x, y, self.maze[(x, y)], id_counter, self)
                self.grid.place_agent(a, (j, i))
                # saves the actual x and y coordinates on the mesa grid
                a.actual_x = a.pos[0]
                a.actual_y = a.pos[1]
                # sets goal node as goal
                if a.pos == self.goal_pos:
                    a.is_goal = True
                # add nodes to the node dictionary
                self.nodes[a.pos] = a
                id_counter += 1

    # initializes walls for a node
    def intialize_walls(self, node, unique_id):
        directions = node.parent_directions
        east = directions["E"]
        west = directions["W"]
        north = directions["N"]
        south = directions["S"]
        # 1 = open, 0 = blocked
        if east == 0:
            wall = Wall(unique_id, self, "E")
            node.walls.append(wall)
        if west == 0:
            wall = Wall(unique_id, self, "W")
            node.walls.append(wall)
        if north == 0:
            wall = Wall(unique_id, self, "N")
            node.walls.append(wall)
        if south == 0:
            wall = Wall(unique_id, self, "S")
            node.walls.append(wall)
        for wall in node.walls:
            self.grid.place_agent(wall, node.pos)

    def maze_to_grid(self):
        # initializes nodes and saves goal and start node
        self.initialize_nodes()
        self.initialize_start_and_goal()
        # wall IDs start at 2000, so they are separate from other agents
        id_counter_walls = 2000
        # after all nodes are created, give each node the list of its neighbours and parents
        for i in self.nodes:
            temp_node = self.nodes[i]
            self.find_neighbours(temp_node)
            self.find_parents(temp_node)
        # initialize walls for each node (used in visualisation)
        for i in self.nodes:
            temp_node = self.nodes[i]
            self.intialize_walls(temp_node, id_counter_walls)
            id_counter_walls += 1
        #place agents on grid
        self.place_agents()

    # places agents on start position
    def place_agents(self):
        id_count_agents = 1000
        for i in range(self.num_agents):
            agents = Agent(self.width * self.height, id_count_agents, self)
            self.agents.append(agents)
            self.schedule.add(agents)
            self.grid.place_agent(agents, (0, 0))
            id_count_agents += 1

    # creates list of surrounding nodes and then adds each one to the neighbours list
    def find_neighbours(self, node):
        all_neighbours = self.grid.get_neighbors(node.pos, False, False, 1)
        for neighbour in all_neighbours:
            node.add_neighbour(neighbour)

    # finds the reachable nodes and adds them to the parents list
    def find_parents(self, node):
        directions = node.parent_directions
        east = directions["E"]
        west = directions["W"]
        north = directions["N"]
        south = directions["S"]
        # add node in the direction, if it is open and not out of bounds
        # open = 1, closed = 0
        if east == 1:
            check_pos = (node.pos[0] + 1, node.pos[1])
            if not self.grid.out_of_bounds(check_pos):
                parent_node = self.grid.get_cell_list_contents(check_pos)[0]
                node.parents.append(parent_node)
        if west == 1:
            check_pos = (node.pos[0] - 1, node.pos[1])
            if not self.grid.out_of_bounds(check_pos):
                parent_node = self.grid.get_cell_list_contents(check_pos)[0]
                node.parents.append(parent_node)
        if north == 1:
            check_pos = (node.pos[0], node.pos[1] + 1)
            if not self.grid.out_of_bounds(check_pos):
                parent_node = self.grid.get_cell_list_contents(check_pos)[0]
                node.parents.append(parent_node)
        if south == 1:
            check_pos = (node.pos[0], node.pos[1] - 1)
            if not self.grid.out_of_bounds(check_pos):
                parent_node = self.grid.get_cell_list_contents(check_pos)[0]
                node.parents.append(parent_node)

    # initializes start and goal nodes
    def initialize_start_and_goal(self):
        self.goal_node = self.nodes[self.goal_pos]
        self.start_node = self.nodes[self.start_pos]

    def next_generation(self, previous_Generation):
        pre_Gen = previous_Generation

        # finding the best in the generation to inherit from
        current_best = pre_Gen[0]
        second_temp = pre_Gen[1]


        for agent in pre_Gen:
            agent.fitness_function()
            current_pos_agents = self.grid.get_cell_list_contents(agent.pos)
            for dude in current_pos_agents:
                if dude.type == 0:
                    current_pos = dude
            if agent.fitness > current_best.fitness:
                current_best = agent
        best_of_Gen = current_best

        for agent in pre_Gen:
            if agent is not best_of_Gen and agent.fitness > second_temp.fitness:
                second_temp = agent
        second_best = second_temp

        x = len(pre_Gen)
        y = (x / 10) / 10
        y = math.floor(y) * 10
        first_num = y * 8
        second_num = y


        for i in range(first_num):
            temp = dc(best_of_Gen.get_gen())
            pre_Gen[i].set_gen(temp)
            pre_Gen[i].mutate()

        for j in range(first_num, (first_num + second_num)):
            temp = dc(second_best.get_gen())
            pre_Gen[j].set_gen(temp)
            pre_Gen[j].mutate()

        # Cross_Over is applied here:
        for x in range(first_num + second_num, len(pre_Gen)):
            pre_Gen[x].set_gen(best_of_Gen.get_gen())
            pre_Gen[x].cross_over(second_best.get_gen())


        for i in range(len(self.agents)):
            temp = pre_Gen[i].Gen
            self.agents[i].Gen = temp

    def get_agent_count_per_node(self):
        for node in self.nodes.values():
            cell_contents = self.grid.get_cell_list_contents(node.pos)
            for a in cell_contents:
                if a.type == 1:
                    node.agent_count += 1

    #stops model by creating an error
    def stop_model(self):
        for a in self.agents:
            self.grid.remove_agent(a)
            self.schedule.remove(a)
        self.is_running = False

    def step(self):
        if self.is_running:
            for a in self.agents:
                a.step_Counter += 1
            # reset after each generation
            if self.agents[0].step_Counter >= len(self.agents[0].Gen):
                # stop model, if an agent of the generation made it to the goal
                for a in self.agents:
                    current_node = a.get_current_node()
                    if current_node.is_goal:
                        self.stop_model()
                # creates next generation and resets all agents to start position
                self.next_generation(self.agents)
                self.gen_count += 1
                for a in self.agents:
                    pos = (0, 0)
                    a.step_Counter = 0
                    self.grid.move_agent(a, pos)
                print(self.gen_count)
            # calculates data for charts
            self.average_fitness = self.calc_avg_fit(self.agents)
            self.max_fitness = self.calc_max_fit(self.agents)
            self.datacollector.collect(self)
            self.schedule.step()
